name: CI/CD

on:
  push:
    branches:
      - 'main'

  workflow_dispatch:

jobs:

  build:
    runs-on: ubuntu-latest

    steps:

    - name: Checkout
      uses: actions/checkout@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Build and push Docker images
      uses: docker/build-push-action@v3.2.0
      with:
        context: .
        file: ./Dockerfile.prod
        push: true
        tags: ${{ secrets.DOCKER_HUB_USERNAME }}/flasktdd:latest
        cache-from: type=registry, ref=${{ secrets.DOCKER_HUB_USERNAME }}/flasktdd:cache
        cache-to: type=registry, ref=${{ secrets.DOCKER_HUB }}/flasktdd:buildcache, mode=max

  test:
    runs-on: ubuntu-latest
    needs: build
    container:
      image: agruezo/flasktdd:latest
    defaults:
      run:
        working-directory: /usr/src/app
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_DB: users
          POSTGRES_USR: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_PORT: 5432
          DATABASE_TEST_URL: postgresql://postgres:postgres@postgres:5432/users
        ports:
          - 5432:5432
        options:
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
            
      - name: Run Tests
        run: |
          pytest "src/tests" -p no:warnings -p no:cacheprovider
          flake8 src
          black src --check
          isort src --check-only

  deploy:
    runs-on: ubuntu-latest
    needs: test
    env:
      HEROKU_API_KEY: ${{ secrets.HEROKU_AUTH_TOKEN }}
      APP_NAME: ${{ secrets.HEROKU_APP_NAME }}
      HEROKU_REGISTRY_IMAGE: registry.heroku.com/${{ secrets.HEROKU_APP_NAME }}

    steps:

    - name: Checkout
      uses: actions/checkout@v3

    - name: Build, Push, and Release a Docker container to Heroku
      run: |
        
        docker build -f ./Dockerfile.prod -t $HEROKU_REGISTRY_IMAGE/web .
        docker login -u _ -p $HEROKU_API_KEY registry.heroku.com
        docker push $HEROKU_REGISTRY_IMAGE/web:latest
        heroku container:release web -a $APP_NAME

    # uses: gonuit/heroku-docker-deploy@v1.3.3
    #   with:
    #     email: ${{ secrets.HEROKU_EMAIL }}
    #     heroku_api_key: ${{ secrets.HEROKU_AUTH_TOKEN }}
    #     heroku_app_name: "young-crag-46718"
    #     dockerfile_directory: ./
    #     dockerfile_name: Dockerfile.prod
    #     docker_options: "--no-cache"
    #     process_type: web

